// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/instrument.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "backend/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInstrumentRepository is a mock of InstrumentRepository interface.
type MockInstrumentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInstrumentRepositoryMockRecorder
}

// MockInstrumentRepositoryMockRecorder is the mock recorder for MockInstrumentRepository.
type MockInstrumentRepositoryMockRecorder struct {
	mock *MockInstrumentRepository
}

// NewMockInstrumentRepository creates a new mock instance.
func NewMockInstrumentRepository(ctrl *gomock.Controller) *MockInstrumentRepository {
	mock := &MockInstrumentRepository{ctrl: ctrl}
	mock.recorder = &MockInstrumentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstrumentRepository) EXPECT() *MockInstrumentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInstrumentRepository) Create(instrument *models.Instrument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", instrument)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInstrumentRepositoryMockRecorder) Create(instrument interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInstrumentRepository)(nil).Create), instrument)
}

// Delete mocks base method.
func (m *MockInstrumentRepository) Delete(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInstrumentRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstrumentRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockInstrumentRepository) Get(id uint64) (*models.Instrument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*models.Instrument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInstrumentRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInstrumentRepository)(nil).Get), id)
}

// GetList mocks base method.
func (m *MockInstrumentRepository) GetList() ([]models.Instrument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList")
	ret0, _ := ret[0].([]models.Instrument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockInstrumentRepositoryMockRecorder) GetList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockInstrumentRepository)(nil).GetList))
}

// Update mocks base method.
func (m *MockInstrumentRepository) Update(id uint64, fieldsToUpdate models.InstrumentFieldsToUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, fieldsToUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockInstrumentRepositoryMockRecorder) Update(id, fieldsToUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInstrumentRepository)(nil).Update), id, fieldsToUpdate)
}
